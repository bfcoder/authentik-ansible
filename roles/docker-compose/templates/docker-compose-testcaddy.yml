---
version: '3.4'

# modified from https://web.archive.org/web/20230414232745/https://goauthentik.io/docker-compose.yml
# https://web.archive.org/web/20230415133810/https://helgeklein.com/blog/authentik-authentication-sso-user-management-password-reset-for-home-networks/
# https://web.archive.org/web/20230415133819/https://helgeklein.com/blog/automatic-https-certificates-for-services-on-internal-home-network-without-opening-firewall-port/

networks:
  web:
    external: true
  internal:
    external: false
    driver: bridge

services:
  caddy:
    image: ghcr.io/bfcoder/caddy-cloudflaredns:latest
    restart: unless-stopped
    logging:
      driver: "local"
      options:
        max-size: "1g"
        max-file: 30
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "{{ mnt_dir }}/caddy/Caddyfile:/etc/caddy/Caddyfile:ro"
      - "{{ mnt_dir }}/caddy/data:/data"
      - "{{ mnt_dir }}/caddy/config:/config"
    networks:
      - web
      - internal
  postgresql:
    image: docker.io/library/postgres:12-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
    networks:
      - internal
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - internal
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.10.5}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - "{{ mnt_dir }}/media:/media"
      - "{{ mnt_dir }}/custom_templates:/templates"
    env_file:
      - .env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      - postgresql
      - redis
    networks:
      - web
      - internal
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.10.5}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ mnt_dir }}/media:/media"
      - "{{ mnt_dir }}/certs:/certs"
      - "{{ mnt_dir }}/custom_templates:/templates"
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    networks:
      - internal

volumes:
  database:
    driver_opts:
      type: none
      o: bind
      device: "{{ mnt_dir }}/database"
  redis:
    driver_opts:
      type: none
      o: bind
      device: "{{ mnt_dir }}/redis"
